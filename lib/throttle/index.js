"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var NOW = Date.now || function () {
  return new Date().getTime();
};
/**
 * Function throttling method, func will only execute once in wait time
 * 函数节流方法，func 在 wait 时间内只会执行一次
 * @param func Incoming function to be executed 传入待执行的函数
 * @param wait time interval 时间间隔
 * @param options Whether to execute the call on the start boundary and the end boundary, all executed by default 是否执行开始边界和结尾边界上的调用，默认均执行 { leading?: boolean, trailing?: boolean }
 */


var throttle = function throttle(func, wait, options) {
  var context, args, result;
  var timeout = null; // 上次执行时间点

  var previous = 0;
  if (!options) options = {}; // 延迟执行函数

  var later = function later() {
    // 若设定了开始边界不执行选项，上次执行时间始终为0
    previous = options.leading === false ? 0 : NOW();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };

  return function () {
    var now = NOW(); // 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。

    if (!previous && options.leading === false) previous = now; // 延迟执行时间间隔

    var remaining = wait - (now - previous);
    context = this;
    args = arguments; // 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口
    // remaining大于时间窗口wait，表示客户端系统时间被调整过

    if (remaining <= 0 || remaining > wait) {
      clearTimeout(timeout);
      timeout = null;
      previous = now;
      result = func.apply(context, args);
      if (!timeout) context = args = null; //如果延迟执行不存在，且没有设定结尾边界不执行选项
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }

    return result;
  };
};

var _default = throttle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aHJvdHRsZS9pbmRleC50cyJdLCJuYW1lcyI6WyJOT1ciLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInRocm90dGxlIiwiZnVuYyIsIndhaXQiLCJvcHRpb25zIiwiY29udGV4dCIsImFyZ3MiLCJyZXN1bHQiLCJ0aW1lb3V0IiwicHJldmlvdXMiLCJsYXRlciIsImxlYWRpbmciLCJhcHBseSIsInJlbWFpbmluZyIsImFyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsInRyYWlsaW5nIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBLElBQU1BLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLElBQVksWUFBWTtBQUNsQyxTQUFPLElBQUlELElBQUosR0FBV0UsT0FBWCxFQUFQO0FBQ0QsQ0FGRDtBQUlBOzs7Ozs7Ozs7QUFPQSxJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVQyxJQUFWLEVBQW9DQyxJQUFwQyxFQUFrREMsT0FBbEQsRUFBZ0c7QUFDL0csTUFBSUMsT0FBSixFQUFrQkMsSUFBbEIsRUFBNkJDLE1BQTdCO0FBQ0EsTUFBSUMsT0FBWSxHQUFHLElBQW5CLENBRitHLENBRy9HOztBQUNBLE1BQUlDLFFBQVEsR0FBRyxDQUFmO0FBQ0EsTUFBSSxDQUFDTCxPQUFMLEVBQWNBLE9BQU8sR0FBRyxFQUFWLENBTGlHLENBTS9HOztBQUNBLE1BQUlNLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVk7QUFDdEI7QUFDQUQsSUFBQUEsUUFBUSxHQUFHTCxPQUFPLENBQUNPLE9BQVIsS0FBb0IsS0FBcEIsR0FBNEIsQ0FBNUIsR0FBZ0NkLEdBQUcsRUFBOUM7QUFDQVcsSUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDQUQsSUFBQUEsTUFBTSxHQUFHTCxJQUFJLENBQUNVLEtBQUwsQ0FBV1AsT0FBWCxFQUFvQkMsSUFBcEIsQ0FBVDtBQUNBLFFBQUksQ0FBQ0UsT0FBTCxFQUFjSCxPQUFPLEdBQUdDLElBQUksR0FBRyxJQUFqQjtBQUNmLEdBTkQ7O0FBT0EsU0FBTyxZQUFxQjtBQUMxQixRQUFJUCxHQUFHLEdBQUdGLEdBQUcsRUFBYixDQUQwQixDQUUxQjs7QUFDQSxRQUFJLENBQUNZLFFBQUQsSUFBYUwsT0FBTyxDQUFDTyxPQUFSLEtBQW9CLEtBQXJDLEVBQTRDRixRQUFRLEdBQUdWLEdBQVgsQ0FIbEIsQ0FJMUI7O0FBQ0EsUUFBSWMsU0FBUyxHQUFHVixJQUFJLElBQUlKLEdBQUcsR0FBR1UsUUFBVixDQUFwQjtBQUNBSixJQUFBQSxPQUFPLEdBQUcsSUFBVjtBQUNBQyxJQUFBQSxJQUFJLEdBQUdRLFNBQVAsQ0FQMEIsQ0FRMUI7QUFDQTs7QUFDQSxRQUFJRCxTQUFTLElBQUksQ0FBYixJQUFrQkEsU0FBUyxHQUFHVixJQUFsQyxFQUF3QztBQUN0Q1ksTUFBQUEsWUFBWSxDQUFDUCxPQUFELENBQVo7QUFDQUEsTUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDQUMsTUFBQUEsUUFBUSxHQUFHVixHQUFYO0FBQ0FRLE1BQUFBLE1BQU0sR0FBR0wsSUFBSSxDQUFDVSxLQUFMLENBQVdQLE9BQVgsRUFBb0JDLElBQXBCLENBQVQ7QUFDQSxVQUFJLENBQUNFLE9BQUwsRUFBY0gsT0FBTyxHQUFHQyxJQUFJLEdBQUcsSUFBakIsQ0FMd0IsQ0FNdEM7QUFDRCxLQVBELE1BT08sSUFBSSxDQUFDRSxPQUFELElBQVlKLE9BQU8sQ0FBQ1ksUUFBUixLQUFxQixLQUFyQyxFQUE0QztBQUNqRFIsTUFBQUEsT0FBTyxHQUFHUyxVQUFVLENBQUNQLEtBQUQsRUFBUUcsU0FBUixDQUFwQjtBQUNEOztBQUNELFdBQU9OLE1BQVA7QUFDRCxHQXJCRDtBQXNCRCxDQXBDRDs7ZUFzQ2VOLFEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIHRocm90dGxlT3B0aW9ucyB7XG4gIGxlYWRpbmc/OiBib29sZWFuLFxuICB0cmFpbGluZz86IGJvb2xlYW5cbn1cblxuY29uc3QgTk9XID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRocm90dGxpbmcgbWV0aG9kLCBmdW5jIHdpbGwgb25seSBleGVjdXRlIG9uY2UgaW4gd2FpdCB0aW1lXG4gKiDlh73mlbDoioLmtYHmlrnms5XvvIxmdW5jIOWcqCB3YWl0IOaXtumXtOWGheWPquS8muaJp+ihjOS4gOasoVxuICogQHBhcmFtIGZ1bmMgSW5jb21pbmcgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQg5Lyg5YWl5b6F5omn6KGM55qE5Ye95pWwXG4gKiBAcGFyYW0gd2FpdCB0aW1lIGludGVydmFsIOaXtumXtOmXtOmalFxuICogQHBhcmFtIG9wdGlvbnMgV2hldGhlciB0byBleGVjdXRlIHRoZSBjYWxsIG9uIHRoZSBzdGFydCBib3VuZGFyeSBhbmQgdGhlIGVuZCBib3VuZGFyeSwgYWxsIGV4ZWN1dGVkIGJ5IGRlZmF1bHQg5piv5ZCm5omn6KGM5byA5aeL6L6555WM5ZKM57uT5bC+6L6555WM5LiK55qE6LCD55So77yM6buY6K6k5Z2H5omn6KGMIHsgbGVhZGluZz86IGJvb2xlYW4sIHRyYWlsaW5nPzogYm9vbGVhbiB9XG4gKi9cbmNvbnN0IHRocm90dGxlID0gZnVuY3Rpb24gKGZ1bmM6IChhcmdzOiBhbnkpID0+IGFueSwgd2FpdDogbnVtYmVyLCBvcHRpb25zOiB0aHJvdHRsZU9wdGlvbnMpOiAoYXJnczogYW55KSA9PiBhbnkge1xuICB2YXIgY29udGV4dDogYW55LCBhcmdzOiBhbnksIHJlc3VsdDogYW55O1xuICB2YXIgdGltZW91dDogYW55ID0gbnVsbDtcbiAgLy8g5LiK5qyh5omn6KGM5pe26Ze054K5XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAvLyDlu7bov5/miafooYzlh73mlbBcbiAgdmFyIGxhdGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIOiLpeiuvuWumuS6huW8gOWni+i+ueeVjOS4jeaJp+ihjOmAiemhue+8jOS4iuasoeaJp+ihjOaXtumXtOWni+e7iOS4ujBcbiAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogTk9XKCk7XG4gICAgdGltZW91dCA9IG51bGw7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcbiAgICB2YXIgbm93ID0gTk9XKCk7XG4gICAgLy8g6aaW5qyh5omn6KGM5pe277yM5aaC5p6c6K6+5a6a5LqG5byA5aeL6L6555WM5LiN5omn6KGM6YCJ6aG577yM5bCG5LiK5qyh5omn6KGM5pe26Ze06K6+5a6a5Li65b2T5YmN5pe26Ze044CCXG4gICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAvLyDlu7bov5/miafooYzml7bpl7Tpl7TpmpRcbiAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAvLyDlu7bov5/ml7bpl7Tpl7TpmpRyZW1haW5pbmflsI/kuo7nrYnkuo4w77yM6KGo56S65LiK5qyh5omn6KGM6Iez5q2k5omA6Ze06ZqU5pe26Ze05bey57uP6LaF6L+H5LiA5Liq5pe26Ze056qX5Y+jXG4gICAgLy8gcmVtYWluaW5n5aSn5LqO5pe26Ze056qX5Y+jd2FpdO+8jOihqOekuuWuouaIt+err+ezu+e7n+aXtumXtOiiq+iwg+aVtOi/h1xuICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgLy/lpoLmnpzlu7bov5/miafooYzkuI3lrZjlnKjvvIzkuJTmsqHmnInorr7lrprnu5PlsL7ovrnnlYzkuI3miafooYzpgInpoblcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlOyJdfQ==